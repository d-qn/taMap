% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cantonal_ch_federalBallot.R
\name{loadCantonsCHFederalBallot}
\alias{loadCantonsCHFederalBallot}
\alias{processFederalBallotByCantons}
\title{Federal ballot results by cantons}
\usage{
loadCantonsCHFederalBallot(file = "federalBallot_cantons.RData")


  processFederalBallotByCantons(url = "https://www.pxweb.bfs.admin.ch/DownloadFile.aspx?file=px-x-1703030000_100",
  output = "federalBallot_cantons.RData")
}
\arguments{
\item{file}{the name of the csv file processed by processFederalBallotByCantons to load}

\item{url}{the URL to the px file with all federal ballots}

\item{output}{the output file name to be saved in the package inst/extdata}
}
\value{
a matrix, rownames are cantons (2 letters name) and colnames are federal ballot IDs. Check the attributes ballotName and date
}
\description{
Load all federal ballots resuts by cantons: \url{https://www.pxweb.bfs.admin.ch/Selection.aspx?px_language=fr&px_db=px-x-1703030000_100&px_tableid=px-x-1703030000_100\px-x-1703030000_100.px&px_type=PX}

Process Portraits regionaux de la Suisse canton px file to be used by loadCantonsCHFederalBallot
This will download the px file from \url{https://www.bfs.admin.ch/bfs/en/home/statistics/politics/popular-votes.assetdetail.1363949.html}, 
process it and save it as a Rdata file in inst/extdata. 
Run it when new data are available.
}
\details{
Run \code{processFederalBallotByCantons()} to generate a readable csv file for loadCantonsCHFederalBallot
}
\examples{
\dontrun{
fBallot <- loadCantonsCHFederalBallot()
attr(fBallot, "ballotName")
cidx <- grep("naturalisation", attr(fBallot, "ballotName"), ignore.case = T)
attr(fBallot, "ballotName")[cidx]
attr(fBallot, "date")[cidx]
# get only naturalisation facilitÃ©e ballots
cidx <- match(c("3150", "4110", "5100", "5110"), colnames(fBallot))
attr(fBallot, "ballotName")[cidx]
glimpse(fBallot[,cidx])

require(sf)
require(dplyr)
require(tamMap)
require(ggplot2)

# get canton shapefiles as a sf data.frame
path.cantons <-  dir(system.file("extdata/shp/CH/2016", package="tamMap"), "cantons.shp", full.names = T)
ca.df <- st_read(path.cantons, layer = "cantons") \%>\%
  select(KANTONSNUM)
# duplicte data.frame for each ballot
df <- do.call(rbind, lapply(cidx, function(idx) {
  value <- fBallot[,idx]
  names(value) <- canton_CH[match(names(value), canton_CH[,1]), "order"]
  res <- ca.df
  res$value <- value[match(res$KANTONSNUM, names(value))]
  res$ballot <- attr(fBallot, "ballotName")[idx]
  res$date <- attr(fBallot, "date")[idx]
  res
}))
# Create breaks
brks <- seq(from = 0, to = 1, length.out = 11) * 100
df <- df \%>\% mutate(
  bins = cut(value, breaks = brks, right = F),
  ballot = factor(ballot, levels = attr(fBallot, "ballotName")[cidx])
)
# plot
gp <- ggplot(df) +
  geom_sf(aes(fill = bins), lwd = 0) +
  facet_wrap(~ ballot) + 
  theme_void() + 
  theme(
   legend.position = "bottom", 
   panel.grid = element_blank(),
   axis.ticks = element_blank(), axis.title = element_blank(), 
   axis.text = element_blank()
  ) + facet_wrap(~ ballot) + 
  scale_fill_brewer(palette = "BrBG" , drop = F)
 gp + ggtitle('Votes naturalisation') + coord_sf( datum = NA) # hack to remove grid/graticule lines: https://github.com/tidyverse/ggplot2/issues/2071
}
\dontrun{
processPortraitsRegionauxCantons()
}
}
\seealso{
\url{https://www.bfs.admin.ch/bfs/en/home/statistics/politics/popular-votes.assetdetail.1363949.html}
}
